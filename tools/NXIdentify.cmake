# -------------------------------
# SPDX-License-Identifier: ISC
#
# Copyright Â© 2022 Daniel Wolf <<nephatrine@gmail.com>>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
# -------------------------------

include(_NXInternals)

# ===================================================================

function(nx_identify_language)
	nx_function_begin()

	# Get Current Information

	get_property(NX_ENABLED_LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)

	# Default Host Variables

	foreach(sTargetLanguage "C" "CXX" "RC")
		if("${sTargetLanguage}" IN_LIST NX_ENABLED_LANGUAGES)
			nx_set(NX_HOST_LANGUAGE_${sTargetLanguage} ON)
		else()
			nx_set(NX_HOST_LANGUAGE_${sTargetLanguage} OFF)
		endif()
		nx_set(${NX_PROJECT_NAME}_LANGUAGE_${sTargetLanguage} ${NX_HOST_LANGUAGE_${sTargetLanguage}})
	endforeach()

	if(NOT NX_HOST_LANGUAGE_C AND NOT NX_HOST_LANGUAGE_CXX)
		nx_set(NX_HOST_LANGUAGE_NONE ON)
	else()
		nx_set(NX_HOST_LANGUAGE_NONE OFF)
	endif()
	nx_set(${NX_PROJECT_NAME}_LANGUAGE_NONE ${NX_HOST_LANGUAGE_NONE})

	nx_function_end()
endfunction()

nx_identify_language()

# ===================================================================

function(nx_identify_platform)
	nx_function_begin()

	# Get Current Information

	string(TOUPPER "${CMAKE_HOST_SYSTEM_NAME}" NX_CMAKE_HOST_SYSTEM_NAME)
	string(TOUPPER "${CMAKE_SYSTEM_NAME}" NX_CMAKE_SYSTEM_NAME)

	# Helpful Lists

	set(NX_PLATFORMS_ANDROID "ANDROID")
	set(NX_PLATFORMS_CYGWIN "CYGWIN" "MSYS")
	set(NX_PLATFORMS_DARWIN "DARWIN")
	set(NX_PLATFORMS_FREEBSD "DRAGONFLY" "FREEBSD")
	set(NX_PLATFORMS_HAIKU "BEOS" "HAIKU")
	set(NX_PLATFORMS_LINUX "LINUX")
	set(NX_PLATFORMS_MSDOS "DJGPP" "MSDOS")
	set(NX_PLATFORMS_WINDOWS "MINGW" "WINDOWS")

	# Determine Host Information

	if("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_CYGWIN)
		nx_set(NX_HOST_PLATFORM_CYGWIN ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_DARWIN)
		nx_set(NX_HOST_PLATFORM_DARWIN ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_FREEBSD)
		nx_set(NX_HOST_PLATFORM_FREEBSD ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_HAIKU)
		nx_set(NX_HOST_PLATFORM_HAIKU ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_LINUX)
		nx_set(NX_HOST_PLATFORM_LINUX ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_WINDOWS)
		nx_set(NX_HOST_PLATFORM_WINDOWS ON)
	else()
		message(WARNING "Unknown Host Platform ('${NX_CMAKE_HOST_SYSTEM_NAME}')")
	endif()

	# Default Host Variables

	foreach(sHostPlatform "CYGWIN" "DARWIN" "FREEBSD" "HAIKU" "LINUX" "WINDOWS")
		if(NOT DEFINED NX_HOST_PLATFORM_${sHostPlatform})
			nx_set(NX_HOST_PLATFORM_${sHostPlatform} OFF)
		endif()
	endforeach()

	# Determine Target Information

	if(NOT DEFINED NX_TARGET_PLATFORM_GENERIC OR NOT NX_TARGET_PLATFORM_GENERIC)
		if("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_ANDROID)
			nx_set(NX_TARGET_PLATFORM_STRING "Android")
			nx_set(NX_TARGET_PLATFORM_ANDROID ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_CYGWIN)
			if(MSYS)
				nx_set(NX_TARGET_PLATFORM_STRING "MSYS")
			else()
				nx_set(NX_TARGET_PLATFORM_STRING "Cygwin")
			endif()
			nx_set(NX_TARGET_PLATFORM_CYGWIN ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
			if(NX_HOST_PLATFORM_CYGWIN)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_DARWIN)
			nx_set(NX_TARGET_PLATFORM_STRING "Darwin")
			nx_set(NX_TARGET_PLATFORM_DARWIN ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
			if(NX_HOST_PLATFORM_DARWIN)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_FREEBSD)
			nx_set(NX_TARGET_PLATFORM_STRING "FreeBSD")
			nx_set(NX_TARGET_PLATFORM_FREEBSD ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
			if(NX_HOST_PLATFORM_FREEBSD)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_HAIKU)
			nx_set(NX_TARGET_PLATFORM_STRING "Haiku")
			nx_set(NX_TARGET_PLATFORM_HAIKU ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
			if(NX_HOST_PLATFORM_HAIKU)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_LINUX)
			nx_set(NX_TARGET_PLATFORM_STRING "Linux")
			nx_set(NX_TARGET_PLATFORM_LINUX ON)
			nx_set(NX_TARGET_PLATFORM_POSIX ON)
			if(NX_HOST_PLATFORM_LINUX)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_MSDOS)
			nx_set(NX_TARGET_PLATFORM_STRING "MSDOS")
			nx_set(NX_TARGET_PLATFORM_MSDOS ON)
		elseif("${NX_CMAKE_SYSTEM_NAME}" IN_LIST NX_PLATFORMS_WINDOWS)
			if(DEFINED NX_TARGET_MSYS_MINGW AND NX_TARGET_MSYS_MINGW)
				nx_set(NX_TARGET_PLATFORM_STRING "Windows")
				nx_set(NX_TARGET_PLATFORM_WINDOWS_MINGW ON)
				nx_set(NX_TARGET_PLATFORM_WINDOWS ON)
			else()
				nx_set(NX_TARGET_PLATFORM_STRING "Windows")
				nx_set(NX_TARGET_PLATFORM_WINDOWS_NATIVE ON)
				nx_set(NX_TARGET_PLATFORM_WINDOWS ON)
			endif()

			if(NX_HOST_PLATFORM_WINDOWS)
				nx_set(NX_TARGET_PLATFORM_NATIVE ON)
			endif()
		else()
			message(FATAL_ERROR "Unsupported Platform Type ('${NX_CMAKE_SYSTEM_NAME}')")
		endif()
	else()
		nx_set(NX_TARGET_PLATFORM_STRING "Generic")
		nx_set(NX_TARGET_PLATFORM_NATIVE ON)
	endif()

	# Default Target Variables

	foreach(
		sTargetPlatform
		"ANDROID"
		"CYGWIN"
		"DARWIN"
		"FREEBSD"
		"HAIKU"
		"LINUX"
		"MSDOS"
		"WINDOWS"
		"WINDOWS_MINGW"
		"WINDOWS_NATIVE"
		"GENERIC"
		"NATIVE"
		"POSIX")
		if(NOT DEFINED NX_TARGET_PLATFORM_${sTargetPlatform})
			nx_set(NX_TARGET_PLATFORM_${sTargetPlatform} OFF)
		endif()
		nx_set(${NX_PROJECT_NAME}_PLATFORM_${sTargetPlatform} ${NX_TARGET_PLATFORM_${sTargetPlatform}})
	endforeach()

	if(NOT NX_TARGET_PLATFORM_NATIVE)
		nx_set(NX_TARGET_PLATFORM_CROSS ON)
	else()
		nx_set(NX_TARGET_PLATFORM_CROSS OFF)
	endif()
	nx_set(${NX_PROJECT_NAME}_PLATFORM_CROSS ${NX_TARGET_PLATFORM_CROSS})

	# Set Identity Macros

	string(TOUPPER "${NX_INTERNAL_PROJECT}" NX_PROJECT_MACRO)
	string(MAKE_C_IDENTIFIER "${NX_PROJECT_MACRO}" NX_PROJECT_MACRO)

	string(TOUPPER "${NX_TARGET_PLATFORM_STRING}" NX_TARGET_PLATFORM_UPPER)
	if(NX_TARGET_PLATFORM_UPPER STREQUAL "MSYS")
		set(NX_TARGET_PLATFORM_UPPER "CYGWIN")
	endif()
	nx_set(NX_TARGET_PLATFORM_DEFINES ${NX_PROJECT_MACRO}_OS_${NX_TARGET_PLATFORM_UPPER}
			${NX_PROJECT_MACRO}_OS_STRING="${NX_TARGET_PLATFORM_STRING}")
	if(NX_TARGET_PLATFORM_POSIX)
		nx_append(NX_TARGET_PLATFORM_DEFINES ${NX_PROJECT_MACRO}_OS_POSIX)
	endif()
	nx_set(${NX_PROJECT_NAME}_PLATFORM_DEFINES ${NX_TARGET_PLATFORM_DEFINES})

	nx_function_end()
endfunction()

nx_identify_platform()

# ===================================================================

function(nx_identify_build)
	nx_function_begin()

	# Get Current Information

	get_property(NX_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
	if(NOT NX_GENERATOR_IS_MULTI_CONFIG)
		if(NOT DEFINED CMAKE_BUILD_TYPE OR NOT CMAKE_BUILD_TYPE)
			list(APPEND _NX_VARLISTS_GLOBAL "CMAKE_BUILD_TYPE")
			if(NX_TARGET_PLATFORM_ANDROID OR NX_TARGET_PLATFORM_MSDOS)
				message(NOTICE "Default Build: Release")
				set(CMAKE_BUILD_TYPE "Release")
				set(CMAKE_BUILD_TYPE
					"Release"
					CACHE STRING "" FORCE)
			else()
				message(NOTICE "Default Build: RelWithDebInfo")
				set(CMAKE_BUILD_TYPE "RelWithDebInfo")
				set(CMAKE_BUILD_TYPE
					"RelWithDebInfo"
					CACHE STRING "" FORCE)
			endif()
		endif()
	endif()

	string(TOUPPER "${CMAKE_BUILD_TYPE}" NX_CMAKE_BUILD_TYPE)

	# Determine Target Information

	if(NOT NX_GENERATOR_IS_MULTI_CONFIG)
		if(NX_CMAKE_BUILD_TYPE STREQUAL "DEBUG")
			nx_set(NX_TARGET_BUILD_STRING "Debug")
			nx_set(NX_TARGET_BUILD_DEBUG ON)
		elseif(NX_CMAKE_BUILD_TYPE STREQUAL "MINSIZEREL")
			nx_set(NX_TARGET_BUILD_STRING "MinSize")
			nx_set(NX_TARGET_BUILD_MINSIZE ON)
		elseif(NX_CMAKE_BUILD_TYPE STREQUAL "RELWITHDEBINFO")
			nx_set(NX_TARGET_BUILD_STRING "Release")
			nx_set(NX_TARGET_BUILD_RELEASE ON)
		elseif(NX_CMAKE_BUILD_TYPE STREQUAL "RELEASE")
			nx_set(NX_TARGET_BUILD_STRING "MaxSpeed")
			nx_set(NX_TARGET_BUILD_MAXSPEED ON)
		else()
			message(FATAL_ERROR "Unsupported Build Type ('${NX_CMAKE_BUILD_TYPE}')")
		endif()
	else()
		nx_set(NX_TARGET_BUILD_STRING "Unknown")
		nx_set(NX_TARGET_BUILD_MULTI ON)
	endif()

	# Default Target Variables

	foreach(sTargetBuild "DEBUG" "MINSIZE" "RELEASE" "MAXSPEED" "MULTI")
		if(NOT DEFINED NX_TARGET_BUILD_${sTargetBuild})
			nx_set(NX_TARGET_BUILD_${sTargetBuild} OFF)
		endif()
		nx_set(${NX_PROJECT_NAME}_BUILD_${sTargetBuild} ${NX_TARGET_BUILD_${sTargetBuild}})
	endforeach()

	# Set Identity Macros

	string(TOUPPER "${NX_INTERNAL_PROJECT}" NX_PROJECT_MACRO)
	string(MAKE_C_IDENTIFIER "${NX_PROJECT_MACRO}" NX_PROJECT_MACRO)

	if(NOT NX_GENERATOR_IS_MULTI_CONFIG)
		string(TOUPPER "${NX_TARGET_BUILD_STRING}" NX_TARGET_BUILD_UPPER)
		nx_set(NX_TARGET_BUILD_DEFINES ${NX_PROJECT_MACRO}_BUILD_${NX_TARGET_BUILD_UPPER}
				${NX_PROJECT_MACRO}_BUILD_STRING="${NX_TARGET_BUILD_STRING}")
	else()
		nx_set(
			NX_TARGET_BUILD_DEFINES
			$<$<CONFIG:Debug>:${NX_PROJECT_MACRO}_BUILD_DEBUG>
			$<$<CONFIG:Debug>:${NX_PROJECT_MACRO}_BUILD_STRING="Debug">
			$<$<CONFIG:MinSizeRel>:${NX_PROJECT_MACRO}_BUILD_MINSIZE>
			$<$<CONFIG:MinSizeRel>:${NX_PROJECT_MACRO}_BUILD_STRING="MinSize">
			$<$<CONFIG:RelWithDebInfo>:${NX_PROJECT_MACRO}_BUILD_RELEASE>
			$<$<CONFIG:RelWithDebInfo>:${NX_PROJECT_MACRO}_BUILD_STRING="Release">
			$<$<CONFIG:Release>:${NX_PROJECT_MACRO}_BUILD_MAXSPEED>
			$<$<CONFIG:Release>:${NX_PROJECT_MACRO}_BUILD_STRING="MaxSpeed">)
	endif()
	nx_set(${NX_PROJECT_NAME}_BUILD_DEFINES ${NX_TARGET_BUILD_DEFINES})

	nx_function_end()
endfunction()

nx_identify_build()

# ===================================================================

function(nx_identify_architecture)
	nx_function_begin()

	# Get Current Information

	string(TOUPPER "${CMAKE_HOST_SYSTEM_PROCESSOR}" NX_CMAKE_HOST_SYSTEM_PROCESSOR)

	if(DEFINED CMAKE_VS_PLATFORM_NAME)
		string(TOUPPER "${CMAKE_VS_PLATFORM_NAME}" NX_CMAKE_SYSTEM_PROCESSOR)
	else()
		string(TOUPPER "${CMAKE_SYSTEM_PROCESSOR}" NX_CMAKE_SYSTEM_PROCESSOR)
	endif()

	if(DEFINED CMAKE_SIZEOF_VOID_P AND CMAKE_SIZEOF_VOID_P GREATER 0)
		math(EXPR NX_CMAKE_SIZEOF_VOID_P "${CMAKE_SIZEOF_VOID_P} * 8")
	else()
		set(NX_CMAKE_SIZEOF_VOID_P 0)
	endif()

	# Helpful Lists

	set(NX_ARCHITECTURES_AMD64 "AMD64" "EM64T" "X64" "X86_64" "X86_64H")
	set(NX_ARCHITECTURES_ARM64 "AARCH64" "ARM64" "ARM64E")
	set(NX_ARCHITECTURES_ARMV7 "ARM" "ARMHF")
	set(NX_ARCHITECTURES_IA32
		"I386"
		"I486"
		"I586"
		"I686"
		"I86PC"
		"IA32"
		"WIN32"
		"X86")
	set(NX_ARCHITECTURES_RV64 "RISCV64")

	# Determine Host Information

	if("${NX_CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_AMD64)
		nx_set(NX_HOST_ARCHITECTURE_AMD64 ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_ARM64)
		nx_set(NX_HOST_ARCHITECTURE_ARM64 ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_ARMV7)
		nx_set(NX_HOST_ARCHITECTURE_ARMV7 ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_IA32)
		nx_set(NX_HOST_ARCHITECTURE_IA32 ON)
	elseif("${NX_CMAKE_HOST_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_RV64)
		nx_set(NX_HOST_ARCHITECTURE_RV64 ON)
	else()
		message(WARNING "Unknown Host Architecture ('${NX_CMAKE_HOST_SYSTEM_PROCESSOR}')")
	endif()

	list(APPEND NX_ARCHITECTURES_IA32 ${NX_ARCHITECTURES_AMD64})
	list(APPEND NX_ARCHITECTURES_ARMV7 ${NX_ARCHITECTURES_ARM64})

	# Default Host Variables

	foreach(sHostArchitecture "AMD64" "ARM64" "ARMV7" "IA32" "RV64")
		if(NOT DEFINED NX_HOST_ARCHITECTURE_${sHostArchitecture})
			nx_set(NX_HOST_ARCHITECTURE_${sHostArchitecture} OFF)
		endif()
	endforeach()

	# This should really be in nx_identify_platform... but has to be here.

	if(NX_TARGET_PLATFORM_MSDOS
		AND NX_HOST_PLATFORM_WINDOWS
		AND NX_HOST_ARCHITECTURE_IA32
		AND NOT NX_TARGET_PLATFORM_NATIVE)
		nx_set(NX_TARGET_PLATFORM_NATIVE ON)
		nx_set(NX_TARGET_PLATFORM_CROSS OFF)
	endif()

	# Determine Target Information

	if(NOT DEFINED NX_TARGET_ARCHITECTURE_GENERIC OR NOT NX_TARGET_ARCHITECTURE_GENERIC)
		if(NX_HOST_LANGUAGE_NONE OR NX_TARGET_PLATFORM_GENERIC)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "Generic")
			nx_set(NX_TARGET_ARCHITECTURE_GENERIC ON)
			nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
		elseif("${NX_CMAKE_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_AMD64 AND NX_CMAKE_SIZEOF_VOID_P EQUAL 64)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "AMD64")
			nx_set(NX_TARGET_ARCHITECTURE_AMD64 ON)
			if(NX_HOST_ARCHITECTURE_AMD64)
				nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_ARM64 AND NX_CMAKE_SIZEOF_VOID_P EQUAL 64)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "ARM64")
			nx_set(NX_TARGET_ARCHITECTURE_ARM64 ON)
			if(NX_HOST_ARCHITECTURE_ARM64)
				nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_ARMV7 AND NX_CMAKE_SIZEOF_VOID_P EQUAL 32)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "ARMv7")
			nx_set(NX_TARGET_ARCHITECTURE_ARMV7 ON)
			if(NX_HOST_ARCHITECTURE_ARMV7 OR NX_HOST_ARCHITECTURE_ARM64)
				nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_IA32 AND NX_CMAKE_SIZEOF_VOID_P EQUAL 32)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "IA32")
			nx_set(NX_TARGET_ARCHITECTURE_IA32 ON)
			if(NX_HOST_ARCHITECTURE_IA32 OR NX_HOST_ARCHITECTURE_AMD64)
				nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
			endif()
		elseif("${NX_CMAKE_SYSTEM_PROCESSOR}" IN_LIST NX_ARCHITECTURES_RV64 AND NX_CMAKE_SIZEOF_VOID_P EQUAL 64)
			nx_set(NX_TARGET_ARCHITECTURE_STRING "RV64")
			nx_set(NX_TARGET_ARCHITECTURE_RV64 ON)
			if(NX_HOST_ARCHITECTURE_RV64)
				nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
			endif()
		else()
			message(FATAL_ERROR "Unsupported Architecture Type ('${NX_CMAKE_SYSTEM_PROCESSOR;${NX_CMAKE_SIZEOF_VOID_P}-Bit}')")
		endif()
	else()
		nx_set(NX_TARGET_ARCHITECTURE_STRING "Generic")
		nx_set(NX_TARGET_ARCHITECTURE_NATIVE ON)
	endif()

	# Default Target Variables

	foreach(
		sTargetArchitecture
		"AMD64"
		"ARM64"
		"ARMV7"
		"IA32"
		"RV64"
		"GENERIC"
		"NATIVE")
		if(NOT DEFINED NX_TARGET_ARCHITECTURE_${sTargetArchitecture})
			nx_set(NX_TARGET_ARCHITECTURE_${sTargetArchitecture} OFF)
		endif()
		nx_set(${NX_PROJECT_NAME}_ARCHITECTURE_${sTargetArchitecture} ${NX_TARGET_ARCHITECTURE_${sTargetArchitecture}})
	endforeach()

	if(NOT NX_TARGET_ARCHITECTURE_NATIVE)
		nx_set(NX_TARGET_ARCHITECTURE_CROSS ON)
	else()
		nx_set(NX_TARGET_ARCHITECTURE_CROSS OFF)
	endif()
	nx_set(${NX_PROJECT_NAME}_ARCHITECTURE_CROSS ${NX_TARGET_ARCHITECTURE_CROSS})

	# Set Identity Macros

	string(TOUPPER "${NX_INTERNAL_PROJECT}" NX_PROJECT_MACRO)
	string(MAKE_C_IDENTIFIER "${NX_PROJECT_MACRO}" NX_PROJECT_MACRO)

	string(TOUPPER "${NX_TARGET_ARCHITECTURE_STRING}" NX_TARGET_ARCHITECTURE_UPPER)
	nx_set(NX_TARGET_ARCHITECTURE_DEFINES ${NX_PROJECT_MACRO}_ARCH_${NX_TARGET_ARCHITECTURE_UPPER}
			${NX_PROJECT_MACRO}_ARCH_STRING="${NX_TARGET_ARCHITECTURE_STRING}" ${NX_PROJECT_MACRO}_ARCH_BITS=${NX_CMAKE_SIZEOF_VOID_P})
	nx_set(${NX_PROJECT_NAME}_ARCHITECTURE_DEFINES ${NX_TARGET_ARCHITECTURE_DEFINES})

	nx_function_end()
endfunction()

nx_identify_architecture()

# ===================================================================

function(nx_identify_compiler)
	if(NX_HOST_LANGUAGE_NONE)
		return()
	endif()
	nx_function_begin()

	# Get Current Information

	if(NX_HOST_LANGUAGE_C)
		string(TOUPPER "${CMAKE_C_SIMULATE_ID}" NX_CMAKE_C_SIMULATE_ID)
		string(TOUPPER "${CMAKE_C_COMPILER_ID}" NX_CMAKE_C_COMPILER_ID)
	endif()

	if(NX_HOST_LANGUAGE_CXX)
		string(TOUPPER "${CMAKE_CXX_SIMULATE_ID}" NX_CMAKE_CXX_SIMULATE_ID)
		string(TOUPPER "${CMAKE_CXX_COMPILER_ID}" NX_CMAKE_CXX_COMPILER_ID)
	endif()

	# Helpful Lists

	set(NX_COMPILERS_CLANG "CLANG")
	set(NX_COMPILERS_GNU "GNU")
	set(NX_COMPILERS_MSVC "MSVC")

	if(NX_HOST_LANGUAGE_C)
		set(bFoundOne OFF)

		if(DEFINED CMAKE_C_SIMULATE_ID AND CMAKE_C_SIMULATE_ID)
			string(TOUPPER "${CMAKE_C_SIMULATE_ID}" NX_CMAKE_C_SIMULATE_ID)
			if("${NX_CMAKE_C_SIMULATE_ID}" IN_LIST NX_COMPILERS_CLANG)
				nx_set(NX_HOST_C_COMPILER_STRING "Clang")
				nx_set(NX_HOST_C_COMPILER_CLANG ON)
				nx_set(NX_HOST_C_VERSION_CLANG ${CMAKE_C_SIMULATE_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_C_SIMULATE_ID}" IN_LIST NX_COMPILERS_GNU)
				nx_set(NX_HOST_C_COMPILER_STRING "GNU")
				nx_set(NX_HOST_C_COMPILER_GNU ON)
				nx_set(NX_HOST_C_VERSION_GNU ${CMAKE_C_SIMULATE_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_C_SIMULATE_ID}" IN_LIST NX_COMPILERS_MSVC)
				nx_set(NX_HOST_C_COMPILER_STRING "MSVC")
				nx_set(NX_HOST_C_COMPILER_MSVC ON)
				nx_set(NX_HOST_C_VERSION_MSVC ${CMAKE_C_SIMULATE_VERSION})
				set(bFoundOne ON)
			endif()
		endif()

		if(DEFINED CMAKE_C_COMPILER_ID AND CMAKE_C_COMPILER_ID)
			string(TOUPPER "${CMAKE_C_COMPILER_ID}" NX_CMAKE_C_COMPILER_ID)
			if("${NX_CMAKE_C_COMPILER_ID}" IN_LIST NX_COMPILERS_CLANG)
				nx_set(NX_HOST_C_COMPILER_STRING "Clang")
				nx_set(NX_HOST_C_COMPILER_CLANG ON)
				nx_set(NX_HOST_C_VERSION_CLANG ${CMAKE_C_COMPILER_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_C_COMPILER_ID}" IN_LIST NX_COMPILERS_GNU)
				nx_set(NX_HOST_C_COMPILER_STRING "GNU")
				nx_set(NX_HOST_C_COMPILER_GNU ON)
				nx_set(NX_HOST_C_VERSION_GNU ${CMAKE_C_COMPILER_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_C_COMPILER_ID}" IN_LIST NX_COMPILERS_MSVC)
				nx_set(NX_HOST_C_COMPILER_STRING "MSVC")
				nx_set(NX_HOST_C_COMPILER_MSVC ON)
				nx_set(NX_HOST_C_VERSION_MSVC ${CMAKE_C_COMPILER_VERSION})
				set(bFoundOne ON)
			endif()
		endif()

		if(NOT bFoundOne)
			nx_set(NX_HOST_C_COMPILER_STRING "Unknown")
			nx_set(NX_HOST_C_COMPILER_UNKNOWN ON)
		endif()
	endif()

	if(NX_HOST_LANGUAGE_CXX)
		set(bFoundOne OFF)

		if(DEFINED CMAKE_CXX_SIMULATE_ID AND CMAKE_CXX_SIMULATE_ID)
			string(TOUPPER "${CMAKE_CXX_SIMULATE_ID}" NX_CMAKE_CXX_SIMULATE_ID)
			if("${NX_CMAKE_CXX_SIMULATE_ID}" IN_LIST NX_COMPILERS_CLANG)
				nx_set(NX_HOST_CXX_COMPILER_STRING "Clang")
				nx_set(NX_HOST_CXX_COMPILER_CLANG ON)
				nx_set(NX_HOST_CXX_VERSION_CLANG ${CMAKE_CXX_SIMULATE_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_CXX_SIMULATE_ID}" IN_LIST NX_COMPILERS_GNU)
				nx_set(NX_HOST_CXX_COMPILER_STRING "GNU")
				nx_set(NX_HOST_CXX_COMPILER_GNU ON)
				nx_set(NX_HOST_CXX_VERSION_GNU ${CMAKE_CXX_SIMULATE_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_CXX_SIMULATE_ID}" IN_LIST NX_COMPILERS_MSVC)
				nx_set(NX_HOST_CXX_COMPILER_STRING "MSVC")
				nx_set(NX_HOST_CXX_COMPILER_MSVC ON)
				nx_set(NX_HOST_CXX_VERSION_MSVC ${CMAKE_CXX_SIMULATE_VERSION})
				set(bFoundOne ON)
			endif()
		endif()

		if(DEFINED CMAKE_CXX_COMPILER_ID AND CMAKE_CXX_COMPILER_ID)
			string(TOUPPER "${CMAKE_CXX_COMPILER_ID}" NX_CMAKE_CXX_COMPILER_ID)
			if("${NX_CMAKE_CXX_COMPILER_ID}" IN_LIST NX_COMPILERS_CLANG)
				nx_set(NX_HOST_CXX_COMPILER_STRING "Clang")
				nx_set(NX_HOST_CXX_COMPILER_CLANG ON)
				nx_set(NX_HOST_CXX_VERSION_CLANG ${CMAKE_CXX_COMPILER_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_CXX_COMPILER_ID}" IN_LIST NX_COMPILERS_GNU)
				nx_set(NX_HOST_CXX_COMPILER_STRING "GNU")
				nx_set(NX_HOST_CXX_COMPILER_GNU ON)
				nx_set(NX_HOST_CXX_VERSION_GNU ${CMAKE_CXX_COMPILER_VERSION})
				set(bFoundOne ON)
			elseif("${NX_CMAKE_CXX_COMPILER_ID}" IN_LIST NX_COMPILERS_MSVC)
				nx_set(NX_HOST_CXX_COMPILER_STRING "MSVC")
				nx_set(NX_HOST_CXX_COMPILER_MSVC ON)
				nx_set(NX_HOST_CXX_VERSION_MSVC ${CMAKE_CXX_COMPILER_VERSION})
				set(bFoundOne ON)
			endif()
		endif()

		if(NOT bFoundOne)
			nx_set(NX_HOST_CXX_COMPILER_STRING "Unknown")
			nx_set(NX_HOST_CXX_COMPILER_UNKNOWN ON)
		endif()
	endif()

	# Default Host Variables

	foreach(sHostCompiler "CLANG" "GNU" "MSVC" "UNKNOWN")
		if(NOT DEFINED NX_HOST_C_COMPILER_${sHostCompiler})
			nx_set(NX_HOST_C_COMPILER_${sHostCompiler} OFF)
		endif()
		if(NOT DEFINED NX_HOST_CXX_COMPILER_${sHostCompiler})
			nx_set(NX_HOST_CXX_COMPILER_${sHostCompiler} OFF)
		endif()
		if(NX_HOST_C_COMPILER_${sHostCompiler} AND NX_HOST_CXX_COMPILER_${sHostCompiler})
			nx_set(NX_HOST_COMPILER_${sHostCompiler} ON)
			nx_set(NX_HOST_COMPILER_${sHostCompiler}_VERSION ${NX_HOST_CXX_VERSION_${sHostCompiler}})
		elseif(NX_HOST_C_COMPILER_${sHostCompiler} AND NOT NX_HOST_LANGUAGE_CXX)
			nx_set(NX_HOST_COMPILER_${sHostCompiler} ON)
			nx_set(NX_HOST_COMPILER_${sHostCompiler}_VERSION ${NX_HOST_C_VERSION_${sHostCompiler}})
		elseif(NX_HOST_CXX_COMPILER_${sHostCompiler} AND NOT NX_HOST_LANGUAGE_C)
			nx_set(NX_HOST_COMPILER_${sHostCompiler} ON)
			nx_set(NX_HOST_COMPILER_${sHostCompiler}_VERSION ${NX_HOST_CXX_VERSION_${sHostCompiler}})
		endif()
		if(NOT DEFINED NX_HOST_COMPILER_${sHostCompiler})
			nx_set(NX_HOST_COMPILER_${sHostCompiler} OFF)
		endif()
		nx_set(${NX_PROJECT_NAME}_COMPILER_${sHostCompiler} ${NX_HOST_COMPILER_${sHostCompiler}})
	endforeach()

	if(NX_TARGET_PLATFORM_ANDROID AND NX_HOST_COMPILER_CLANG)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_CYGWIN AND NX_HOST_COMPILER_GNU)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_DARWIN AND NX_HOST_COMPILER_CLANG)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_FREEBSD AND NX_HOST_COMPILER_CLANG)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_HAIKU AND NX_HOST_COMPILER_GNU)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_LINUX AND NX_HOST_COMPILER_GNU)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_WINDOWS_MINGW AND NX_HOST_COMPILER_GNU)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE AND NX_HOST_COMPILER_MSVC)
		nx_set(NX_HOST_COMPILER_NATIVE ON)
	else()
		nx_set(NX_HOST_COMPILER_NATIVE OFF)
	endif()
	nx_set(${NX_PROJECT_NAME}_COMPILER_NATIVE ${NX_HOST_COMPILER_NATIVE})

	if("x${NX_HOST_C_COMPILER_STRING}" STREQUAL "x${NX_HOST_CXX_COMPILER_STRING}")
		nx_set(NX_HOST_COMPILER_STRING ${NX_HOST_CXX_COMPILER_STRING})
	elseif(DEFINED NX_HOST_C_COMPILER_STRING AND NOT NX_HOST_LANGUAGE_CXX)
		nx_set(NX_HOST_COMPILER_STRING ${NX_HOST_C_COMPILER_STRING})
	elseif(DEFINED NX_HOST_CXX_COMPILER_STRING AND NOT NX_HOST_LANGUAGE_C)
		nx_set(NX_HOST_COMPILER_STRING ${NX_HOST_CXX_COMPILER_STRING})
	endif()

	if(NX_HOST_LANGUAGE_C AND NX_HOST_C_COMPILER_UNKNOWN)
		message(FATAL_ERROR "NXClient: Unsupported C Compiler ('${CMAKE_C_COMPILER_ID}')")
	endif()
	if(NX_HOST_LANGUAGE_CXX AND NX_HOST_CXX_COMPILER_UNKNOWN)
		message(FATAL_ERROR "NXClient: Unsupported C++ Compiler ('${CMAKE_CXX_COMPILER_ID}')")
	endif()
	if(NOT DEFINED NX_HOST_COMPILER_STRING)
		message(FATAL_ERROR "NXClient: Unsupported Compiler Combination ('${NX_HOST_C_COMPILER_STRING}')('${NX_HOST_CXX_COMPILER_STRING}')")
	endif()

	# System Configuration

	if(NX_HOST_COMPILER_CLANG AND NOT DEFINED CMAKE_EXPORT_COMPILE_COMMANDS)
		nx_set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
	endif()

	# Set Identity Macros

	string(TOUPPER "${NX_INTERNAL_PROJECT}" NX_PROJECT_MACRO)
	string(MAKE_C_IDENTIFIER "${NX_PROJECT_MACRO}" NX_PROJECT_MACRO)

	string(TOUPPER "${NX_HOST_COMPILER_STRING}" NX_HOST_COMPILER_UPPER)
	nx_set(NX_HOST_COMPILER_DEFINES ${NX_PROJECT_MACRO}_COMPILER_${NX_HOST_COMPILER_UPPER}
			${NX_PROJECT_MACRO}_COMPILER_STRING="${NX_HOST_COMPILER_STRING}")
	if(NX_HOST_LANGUAGE_C)
		string(TOUPPER "${NX_HOST_C_COMPILER_STRING}" NX_HOST_C_COMPILER_UPPER)
		if(NX_HOST_LANGUAGE_CXX)
			nx_append(NX_HOST_COMPILER_DEFINES $<$<COMPILE_LANGUAGE:C>:${NX_PROJECT_MACRO}_C_${NX_HOST_C_COMPILER_UPPER}>
						$<$<COMPILE_LANGUAGE:C>:${NX_PROJECT_MACRO}_C_STRING="${NX_HOST_C_COMPILER_STRING}">)
		else()
			nx_append(NX_HOST_COMPILER_DEFINES ${NX_PROJECT_MACRO}_C_${NX_HOST_C_COMPILER_UPPER}
						${NX_PROJECT_MACRO}_C_STRING="${NX_HOST_C_COMPILER_STRING}")
		endif()
	endif()
	if(NX_HOST_LANGUAGE_CXX)
		string(TOUPPER "${NX_HOST_CXX_COMPILER_STRING}" NX_HOST_CXX_COMPILER_UPPER)
		if(NX_HOST_LANGUAGE_C)
			nx_append(NX_HOST_COMPILER_DEFINES $<$<COMPILE_LANGUAGE:CXX>:${NX_PROJECT_MACRO}_CXX_${NX_HOST_CXX_COMPILER_UPPER}>
						$<$<COMPILE_LANGUAGE:CXX>:${NX_PROJECT_MACRO}_CXX_STRING="${NX_HOST_CXX_COMPILER_STRING}">)
		else()
			nx_append(NX_HOST_COMPILER_DEFINES ${NX_PROJECT_MACRO}_CXX_${NX_HOST_CXX_COMPILER_UPPER}
						${NX_PROJECT_MACRO}_CXX_STRING="${NX_HOST_CXX_COMPILER_STRING}")
		endif()
	endif()
	nx_set(${NX_PROJECT_NAME}_COMPILER_DEFINES ${NX_HOST_COMPILER_DEFINES})

	nx_function_end()
endfunction()

nx_identify_compiler()

# ===================================================================

function(nx_identify_cxxabi)
	nx_function_begin()

	# Default Target Variables

	if(NX_HOST_LANGUAGE_CXX)
		if(NX_TARGET_PLATFORM_LINUX OR NX_TARGET_PLATFORM_WINDOWS)
			include(CheckCXXSourceCompiles)

			check_cxx_source_compiles(
				"#include <utility>\n#if defined(_YVALS) || defined(_CPPLIB_VER)\nint main(int argc, char *argv[]) {return 0;}\n#endif"
				NX_TARGET_ABI_CXX_DINKUMWARE)
			check_cxx_source_compiles(
				"#include <bits/c++config.h>\n#ifdef __GLIBCXX__\nint main(int argc, char *argv[]) {return 0;}\n#endif"
				NX_TARGET_ABI_CXX_GNU)
			check_cxx_source_compiles("#include <ciso646>\n#ifdef _LIBCPP_VERSION\nint main(int argc, char *argv[]) {return 0;}\n#endif"
										NX_TARGET_ABI_CXX_LLVM)

			if(NX_TARGET_PLATFORM_LINUX AND NX_TARGET_ABI_CXX_LLVM)
				nx_set(NX_TARGET_CXXABI_LLVM ON)
				nx_set(NX_TARGET_CXXABI_STRING "libc++")
			elseif(NX_TARGET_PLATFORM_WINDOWS AND NX_TARGET_ABI_CXX_LLVM)
				nx_set(NX_TARGET_CXXABI_LLVM ON)
				nx_set(NX_TARGET_CXXABI_STRING "libc++")
			elseif(NX_TARGET_PLATFORM_WINDOWS_MINGW AND NX_TARGET_ABI_CXX_DINKUMWARE)
				nx_set(NX_TARGET_CXXABI_MSVC ON)
				nx_set(NX_TARGET_CXXABI_STRING "msvc++")
			elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE AND NX_TARGET_ABI_CXX_GNU)
				nx_set(NX_TARGET_CXXABI_GNU ON)
				nx_set(NX_TARGET_CXXABI_STRING "libstdc++")
			endif()

			foreach(sTargetABI "GNU" "LLVM" "MSVC")
				if(NOT DEFINED NX_TARGET_CXXABI_${sTargetABI})
					nx_set(NX_TARGET_CXXABI_${sTargetABI} OFF)
				endif()
				nx_set(${NX_PROJECT_NAME}_CXXABI_${sTargetABI} ${NX_TARGET_CXXABI_${sTargetABI}})
			endforeach()
		endif()
	endif()

	nx_function_end()
endfunction()

nx_identify_cxxabi()
