# -------------------------------
# SPDX-License-Identifier: ISC
#
# Copyright Â© 2021 Daniel Wolf <<nephatrine@gmail.com>>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
# -------------------------------

include(NXIdentify)

nx_guard_file()

nx_set(NXINSTALL_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}")

# ===================================================================

if(NOT DEFINED CMAKE_BUILD_RPATH_USE_ORIGIN)
	set(CMAKE_BUILD_RPATH_USE_ORIGIN ON)
endif()
if(NOT DEFINED CMAKE_INSTALL_NAME_DIR AND NX_TARGET_PLATFORM_DARWIN)
	set(CMAKE_INSTALL_NAME_DIR "@rpath")
endif()
if(NOT DEFINED CMAKE_INSTALL_RPATH)
	if(NX_TARGET_PLATFORM_DARWIN)
		set(CMAKE_INSTALL_RPATH "@loader_path")
	else()
		set(CMAKE_INSTALL_RPATH "$ORIGIN")
	endif()
endif()
if(NOT DEFINED CMAKE_INSTALL_RPATH_USE_LINK_PATH)
	set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
endif()

# ===================================================================

if(NX_TARGET_PLATFORM_MSDOS OR NX_TARGET_PLATFORM_WINDOWS)
	if(NX_TARGET_PLATFORM_NATIVE AND NOT "x$ENV{SystemDrive}" STREQUAL "x")
		set(NX_INSTALL_PATH_DRIVE "$ENV{SystemDrive}")
	else()
		set(NX_INSTALL_PATH_DRIVE "C:")
	endif()
	set(NX_PACKAGE_PATH_DRIVE "C:")
endif()

function(nx_install_pathext subPath)
	nx_function_begin()

	if(NOT "x${subPath}" STREQUAL "x")
		if(NX_TARGET_PLATFORM_MSDOS)
			nx_string_limit(subPath "${subPath}" 8)
		endif()
		set(subPath "/${subPath}")
	endif()

	# -- The Install Paths --

	foreach(sPathType "DATA" "LIBRARIES" "SETTINGS")
		unset(NX_INSTALL_PATHEXT_${sPathType})
	endforeach()

	if(NX_TARGET_PLATFORM_HAIKU)
		set(NX_INSTALL_PATHEXT_DATA "data/${NX_INSTALL_PROJECT_PARENT}${subPath}")
		set(NX_INSTALL_PATHEXT_LIBRARIES
			"lib${NX_INSTALL_LIBRARY_SUFFIX}/${NX_INSTALL_PROJECT_PARENT}${NX_INSTALL_LIBRARY_APPEND}${subPath}")
		set(NX_INSTALL_PATHEXT_SETTINGS "settings/${NX_INSTALL_PROJECT_PARENT}${subPath}")
	elseif(NX_TARGET_PLATFORM_MSDOS)
		string(TOUPPER "${subPath}" subPath)
		set(NX_INSTALL_PATHEXT_DATA "DATA${subPath}")
		set(NX_INSTALL_PATHEXT_LIBRARIES "LIB${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}${subPath}")
		set(NX_INSTALL_PATHEXT_SETTINGS "ETC${subPath}")
	elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE)
		set(NX_INSTALL_PATHEXT_DATA "Data${subPath}")
		set(NX_INSTALL_PATHEXT_LIBRARIES "Modules${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}${subPath}")
		set(NX_INSTALL_PATHEXT_SETTINGS "Settings${subPath}")
	else()
		string(TOLOWER "${subPath}" subPath)
		set(NX_INSTALL_PATHEXT_DATA "share/${NX_INSTALL_PROJECT_PARENT}${subPath}")
		set(NX_INSTALL_PATHEXT_LIBRARIES
			"lib${NX_INSTALL_LIBRARY_SUFFIX}/${NX_INSTALL_PROJECT_PARENT}${NX_INSTALL_LIBRARY_APPEND}${subPath}")
		set(NX_INSTALL_PATHEXT_SETTINGS "etc/${NX_INSTALL_PROJECT_PARENT}${subPath}")
	endif()

	if(NOT DEFINED NX_INSTALL_PATHEXT_LIBRARIES)
		set(NX_INSTALL_PATHEXT_LIBRARIES "${NX_INSTALL_PATH_LIBRARIES}${subPath}")
	endif()

	set(NX_INSTALL_PATHEXT_LIBRARIES_DEBUG "${NX_INSTALL_PATHEXT_LIBRARIES}")

	if(DEFINED CMAKE_OBJCOPY AND EXISTS "${CMAKE_OBJCOPY}")
		set(NX_INSTALL_PATHEXT_LIBRARIES_DEBUG "${NX_INSTALL_PATHEXT_LIBRARIES_DEBUG}/.debug")
	endif()

	file(RELATIVE_PATH NX_INSTALL_PATHEXT_LIBRARIES_RPATH "/${NX_INSTALL_PATHEXT_LIBRARIES}" "/${NX_INSTALL_PATH_LIBRARIES}")

	foreach(sPathType "DATA" "LIBRARIES" "LIBRARIES_DEBUG" "LIBRARIES_RPATH" "SETTINGS")
		nx_set(NX_INSTALL_PATHEXT_${sPathType} "${NX_INSTALL_PATHEXT_${sPathType}}")
		nx_set(${NX_PROJECT_NAME}_PATHEXT_${sPathType} "${NX_INSTALL_PATHEXT_${sPathType}}")
	endforeach()

	nx_function_end()
endfunction()

function(nx_install_initialize)
	nx_function_begin()

	set(bShouldInstall ON)
	if(${NX_PROJECT_NAME}_IS_EXTERNAL)
		set(bShouldInstall OFF)
	endif()

	nx_option(INSTALL_TARGETS_ALL "Install Targets" ON)
	nx_dependent_option(INSTALL_TARGETS${NX_PROJECT_NAME} "Install Targets - ${PROJECT_NAME}" ${bShouldInstall} "INSTALL_TARGETS_ALL" OFF)

	# -- Project Version Tag --

	if(NOT DEFINED NX_INSTALL_PROJECT_VERSION)
		if(DEFINED ${NX_PROJECT_NAME}_PROJECT_VERSION_COMPAT)
			set(NX_INSTALL_PROJECT_VERSION "${${NX_PROJECT_NAME}_PROJECT_VERSION_COMPAT}")
		elseif(DEFINED ${NX_PROJECT_NAME}_PROJECT_SOVERSION_COMPAT)
			set(NX_INSTALL_PROJECT_VERSION "${${NX_PROJECT_NAME}_PROJECT_SOVERSION_COMPAT}")
		endif()
	endif()

	# -- Project Parent Tag --

	if(NOT DEFINED NX_INSTALL_PROJECT_PARENT)
		if(DEFINED ${NX_PROJECT_NAME}_PROJECT_PARENT)
			set(NX_INSTALL_PROJECT_PARENT "${${NX_PROJECT_NAME}_PROJECT_PARENT}")
		elseif(DEFINED ${NX_PROJECT_NAME}_PROJECT_NAME)
			set(NX_INSTALL_PROJECT_PARENT "${${NX_PROJECT_NAME}_PROJECT_NAME}")
		else()
			set(NX_INSTALL_PROJECT_PARENT "${PROJECT_NAME}")
		endif()
	endif()

	# -- Project Child Tag --

	if(DEFINED ${NX_PROJECT_NAME}_PROJECT_NAME)
		if(NOT NX_INSTALL_PROJECT_PARENT STREQUAL "${${NX_PROJECT_NAME}_PROJECT_NAME}")
			set(NX_INSTALL_PROJECT_CHILD "${${NX_PROJECT_NAME}_PROJECT_NAME}")
		endif()
	endif()

	# -- Project Architecture Tags --

	if(NOT DEFINED NX_INSTALL_BINARY_APPEND AND NOT DEFINED NX_INSTALL_BINARY_SUFFIX)
		if(NX_TARGET_PLATFORM_ANDROID)
			if(DEFINED ANDROID_ABI)
				set(NX_INSTALL_BINARY_APPEND "${ANDROID_ABI}")
			endif()
		elseif(NX_TARGET_PLATFORM_MSDOS)
			if(NX_TARGET_ARCHITECTURE_IA32)
				set(NX_INSTALL_BINARY_SUFFIX "32")
			endif()
		elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE)
			set(NX_INSTALL_BINARY_APPEND "${NX_TARGET_ARCHITECTURE_STRING}")
		else()
			if(DEFINED NX_INSTALL_OPT AND NX_INSTALL_OPT)
				set(NX_INSTALL_BINARY_APPEND "${NX_TARGET_ARCHITECTURE_STRING}")
			endif()
		endif()

		if(DEFINED NX_INSTALL_BINARY_APPEND)
			set(NX_INSTALL_BINARY_APPEND "/${NX_INSTALL_BINARY_APPEND}")
			if(NX_TARGET_PLATFORM_MSDOS)
				string(TOUPPER "${NX_INSTALL_BINARY_APPEND}" NX_INSTALL_BINARY_APPEND)
			elseif(NX_TARGET_PLATFORM_POSIX OR NX_TARGET_PLATFORM_WINDOWS_MINGW)
				string(TOLOWER "${NX_INSTALL_BINARY_APPEND}" NX_INSTALL_BINARY_APPEND)
			endif()
		endif()
	endif()

	if(NOT DEFINED NX_INSTALL_LIBRARY_APPEND AND NOT DEFINED NX_INSTALL_LIBRARY_SUFFIX)
		if(NX_TARGET_PLATFORM_ANDROID)
			if(DEFINED ANDROID_ABI)
				set(NX_INSTALL_LIBRARY_APPEND "${ANDROID_ABI}")
			endif()
		elseif(NX_TARGET_PLATFORM_MSDOS)
			if(NX_TARGET_ARCHITECTURE_IA32)
				set(NX_INSTALL_LIBRARY_SUFFIX "32")
			endif()
		elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE)
			set(NX_INSTALL_LIBRARY_APPEND "${NX_TARGET_ARCHITECTURE_STRING}")
		else()
			if(DEFINED NX_INSTALL_OPT AND NX_INSTALL_OPT)
				set(NX_INSTALL_LIBRARY_APPEND "${NX_TARGET_ARCHITECTURE_STRING}")
			elseif(DEFINED CMAKE_LIBRARY_ARCHITECTURE)
				set(NX_INSTALL_LIBRARY_APPEND "${CMAKE_LIBRARY_ARCHITECTURE}")
			elseif(NX_TARGET_ARCHITECTURE_AMD64 AND NX_TARGET_PLATFORM_LINUX)
				set(NX_INSTALL_LIBRARY_SUFFIX "64")
			elseif(NX_TARGET_ARCHITECTURE_IA32 AND NX_TARGET_PLATFORM_FREEBSD)
				set(NX_INSTALL_LIBRARY_SUFFIX "32")
			endif()
		endif()

		if(DEFINED NX_INSTALL_LIBRARY_APPEND)
			set(NX_INSTALL_LIBRARY_APPEND "/${NX_INSTALL_LIBRARY_APPEND}")
			if(NX_TARGET_PLATFORM_MSDOS)
				string(TOUPPER "${NX_INSTALL_LIBRARY_APPEND}" NX_INSTALL_LIBRARY_APPEND)
			elseif(NX_TARGET_PLATFORM_POSIX OR NX_TARGET_PLATFORM_WINDOWS_MINGW)
				string(TOLOWER "${NX_INSTALL_LIBRARY_APPEND}" NX_INSTALL_LIBRARY_APPEND)
			endif()
		endif()
	endif()

	# -- The Install Paths --

	foreach(
		sPathType
		"APPS"
		"BINARIES"
		"DATA"
		"DOCUMENTATION"
		"LIBRARIES"
		"LICENSES"
		"LOCAL"
		"ROOT"
		"SERVERS"
		"SETTINGS")
		unset(NX_INSTALL_PATH_${sPathType})
	endforeach()
	foreach(sPathType "DOCUMENTATION" "EXPORT" "HEADERS" "LIBRARIES" "SOURCE" "SOURCE_BASE")
		unset(NX_INSTALL_PATHDEV_${sPathType})
	endforeach()

	if(NX_TARGET_PLATFORM_HAIKU)
		set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PROJECT_PARENT}")
		set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PROJECT_PARENT}")
		if(DEFINED NX_INSTALL_PROJECT_CHILD)
			set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PATH_SPECIFIC}-${NX_INSTALL_PROJECT_CHILD}")
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}-${NX_INSTALL_PROJECT_CHILD}")
		endif()
		if(DEFINED NX_INSTALL_PROJECT_VERSION)
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}-${NX_INSTALL_PROJECT_VERSION}")
		endif()

		if(NX_TARGET_PLATFORM_NATIVE
			AND NOT "x$ENV{HOME}" STREQUAL "x"
			AND NX_HOST_PLATFORM_HAIKU)
			set(NX_INSTALL_PATH_ROOT "$ENV{HOME}/config")
		else()
			set(NX_INSTALL_PATH_ROOT "/boot/home/config")
		endif()
		if(DEFINED NX_INSTALL_OPT AND NX_INSTALL_OPT)
			set(NX_INSTALL_PATH_ROOT "${NX_INSTALL_PATH_ROOT}/third-party/${NX_INSTALL_OPT}")
		else(NOT DEFINED NX_INSTALL_SYSTEM OR NOT NX_INSTALL_SYSTEM)
			set(NX_INSTALL_PATH_LOCAL "${NX_INSTALL_PATH_ROOT}/non-packaged")
		endif()

		set(NX_INSTALL_PATH_APPS "apps${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}/${NX_INSTALL_PROJECT_PARENT}")
		set(NX_INSTALL_PATH_BINARIES "bin${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}")
		set(NX_INSTALL_PATH_LIBRARIES "lib${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATH_SERVERS "servers${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}")

		set(NX_INSTALL_PATH_DATA "data/${NX_INSTALL_PATH_SPECIFIC}")
		set(NX_INSTALL_PATH_DOCUMENTATION "documentation/packages/${NX_INSTALL_PATH_SPECIFIC}")
		set(NX_INSTALL_PATH_SETTINGS "settings/${NX_INSTALL_PATH_SPECIFIC}")

		set(NX_INSTALL_PATHDEV_DOCUMENTATION "develop/documentation/packages/${NX_INSTALL_PATHDEV_SPECIFIC}")
		set(NX_INSTALL_PATHDEV_EXPORT "develop/lib${NX_INSTALL_LIBRARY_SUFFIX}/cmake${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_HEADERS "develop/headers/${NX_INSTALL_PATHDEV_SPECIFIC}")
		set(NX_INSTALL_PATHDEV_LIBRARIES "develop/${NX_INSTALL_PATH_LIBRARIES}")
		set(NX_INSTALL_PATHDEV_SOURCE "develop/sources/${NX_INSTALL_PATHDEV_SPECIFIC}")
		set(NX_INSTALL_PATHDEV_SOURCE_BASE "develop/sources")
	elseif(NX_TARGET_PLATFORM_MSDOS)
		unset(NX_INSTALL_PATH_SPECIFIC)
		unset(NX_INSTALL_PATHDEV_SPECIFIC)
		if(DEFINED NX_INSTALL_PROJECT_CHILD)
			set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PROJECT_CHILD}")
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PROJECT_CHILD}")
			if(DEFINED NX_INSTALL_PROJECT_VERSION)
				set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}${NX_INSTALL_PROJECT_VERSION}")
			endif()
		elseif(DEFINED NX_INSTALL_PROJECT_VERSION)
			set(NX_INSTALL_PATHDEV_SPECIFIC "v${NX_INSTALL_PROJECT_VERSION}")
		endif()

		if(DEFINED NX_INSTALL_PATH_SPECIFIC)
			nx_string_limit(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PATH_SPECIFIC}" 8)
			string(TOUPPER "${NX_INSTALL_PATHDEV_SPECIFIC}" NX_INSTALL_PATHDEV_SPECIFIC)
			set(NX_INSTALL_PATH_SPECIFIC "PKG/${NX_INSTALL_PATH_SPECIFIC}/")
		endif()
		if(DEFINED NX_INSTALL_PATHDEV_SPECIFIC)
			nx_string_limit(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}" 8)
			string(TOUPPER "${NX_INSTALL_PATHDEV_SPECIFIC}" NX_INSTALL_PATHDEV_SPECIFIC)
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}/")
		endif()

		nx_string_limit(NX_INSTALL_PROJECT_PARENT "${NX_INSTALL_PROJECT_PARENT}" 8)
		string(TOUPPER "${NX_INSTALL_PROJECT_PARENT}" NX_INSTALL_PROJECT_PARENT)
		set(NX_INSTALL_PATH_ROOT "/${NX_INSTALL_PROJECT_PARENT}")

		set(NX_INSTALL_PATH_BINARIES "BIN${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}")

		set(NX_INSTALL_PATH_DATA "${NX_INSTALL_PATH_SPECIFIC}DATA")
		set(NX_INSTALL_PATH_DOCUMENTATION "${NX_INSTALL_PATH_SPECIFIC}DOCS")
		set(NX_INSTALL_PATH_SETTINGS "${NX_INSTALL_PATH_SPECIFIC}ETC")

		set(NX_INSTALL_PATHDEV_DOCUMENTATION "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}DOCS")
		set(NX_INSTALL_PATHDEV_EXPORT "SDK/CMAKE${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_HEADERS "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}INCLUDE")
		set(NX_INSTALL_PATHDEV_LIBRARIES "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}LIB${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_SOURCE "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}SRC")
		set(NX_INSTALL_PATHDEV_SOURCE_BASE "SRC")
	elseif(NX_TARGET_PLATFORM_WINDOWS_NATIVE)
		unset(NX_INSTALL_PATH_SPECIFIC)
		unset(NX_INSTALL_PATHDEV_SPECIFIC)
		if(DEFINED NX_INSTALL_PROJECT_CHILD)
			set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PROJECT_CHILD}")
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PROJECT_CHILD}")
			if(DEFINED NX_INSTALL_PROJECT_VERSION)
				set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}-v${NX_INSTALL_PROJECT_VERSION}")
			endif()
		elseif(DEFINED NX_INSTALL_PROJECT_VERSION)
			set(NX_INSTALL_PATHDEV_SPECIFIC "v${NX_INSTALL_PROJECT_VERSION}")
		endif()

		if(DEFINED NX_INSTALL_PATH_SPECIFIC)
			set(NX_INSTALL_PATH_SPECIFIC "Addons/${NX_INSTALL_PATH_SPECIFIC}/")
		endif()
		if(DEFINED NX_INSTALL_PATHDEV_SPECIFIC)
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}/")
		endif()

		set(NX_INSTALL_PATH_ROOT "/NX/${NX_INSTALL_PROJECT_PARENT}")

		set(NX_INSTALL_PATH_BINARIES "Binaries${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}")

		set(NX_INSTALL_PATH_DATA "${NX_INSTALL_PATH_SPECIFIC}Data")
		set(NX_INSTALL_PATH_DOCUMENTATION "${NX_INSTALL_PATH_SPECIFIC}Documentation")
		set(NX_INSTALL_PATH_SETTINGS "${NX_INSTALL_PATH_SPECIFIC}Settings")

		set(NX_INSTALL_PATHDEV_DOCUMENTATION "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}Documentation")
		set(NX_INSTALL_PATHDEV_EXPORT "SDK/CMake${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_HEADERS "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}Headers")
		set(NX_INSTALL_PATHDEV_LIBRARIES
			"SDK/${NX_INSTALL_PATHDEV_SPECIFIC}Libraries${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_SOURCE "SDK/${NX_INSTALL_PATHDEV_SPECIFIC}Sources")
		set(NX_INSTALL_PATHDEV_SOURCE_BASE "Sources")
	else()
		set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PROJECT_PARENT}")
		set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PROJECT_PARENT}")
		if(DEFINED NX_INSTALL_PROJECT_CHILD)
			set(NX_INSTALL_PATH_SPECIFIC "${NX_INSTALL_PATH_SPECIFIC}-${NX_INSTALL_PROJECT_CHILD}")
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}-${NX_INSTALL_PROJECT_CHILD}")
		endif()
		if(DEFINED NX_INSTALL_PROJECT_VERSION)
			set(NX_INSTALL_PATHDEV_SPECIFIC "${NX_INSTALL_PATHDEV_SPECIFIC}-${NX_INSTALL_PROJECT_VERSION}")
		endif()

		if(DEFINED NX_INSTALL_PATH_SPECIFIC)
			string(TOLOWER "${NX_INSTALL_PATH_SPECIFIC}" NX_INSTALL_PATH_SPECIFIC)
		endif()
		if(DEFINED NX_INSTALL_PATHDEV_SPECIFIC)
			string(TOLOWER "${NX_INSTALL_PATHDEV_SPECIFIC}" NX_INSTALL_PATHDEV_SPECIFIC)
		endif()
		string(TOLOWER "${NX_INSTALL_PROJECT_PARENT}" NX_INSTALL_PROJECT_PARENT)

		set(NX_INSTALL_PATH_ROOT "/usr")
		if(DEFINED NX_INSTALL_OPT AND NX_INSTALL_OPT)
			set(NX_INSTALL_PATH_ROOT "${NX_INSTALL_PATH_ROOT}/opt/${NX_INSTALL_OPT}")
		else(NOT DEFINED NX_INSTALL_SYSTEM OR NOT NX_INSTALL_SYSTEM)
			set(NX_INSTALL_PATH_LOCAL "${NX_INSTALL_PATH_ROOT}/local")
		endif()

		set(NX_INSTALL_PATH_BINARIES "bin${NX_INSTALL_BINARY_SUFFIX}${NX_INSTALL_BINARY_APPEND}")

		if(NX_TARGET_PLATFORM_CYGWIN OR NX_TARGET_PLATFORM_WINDOWS_MINGW)
			set(NX_INSTALL_PATHDEV_LIBRARIES "lib${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		else()
			set(NX_INSTALL_PATH_LIBRARIES "lib${NX_INSTALL_LIBRARY_SUFFIX}${NX_INSTALL_LIBRARY_APPEND}")
		endif()

		set(NX_INSTALL_PATH_DATA "share/${NX_INSTALL_PATH_SPECIFIC}")
		set(NX_INSTALL_PATH_DOCUMENTATION "share/doc/${NX_INSTALL_PATH_SPECIFIC}")
		set(NX_INSTALL_PATH_LICENSES "share/licenses/${NX_INSTALL_PATH_SPECIFIC}")
		set(NX_INSTALL_PATH_SETTINGS "etc/${NX_INSTALL_PATH_SPECIFIC}")

		set(NX_INSTALL_PATHDEV_EXPORT "lib${NX_INSTALL_LIBRARY_SUFFIX}/cmake${NX_INSTALL_LIBRARY_APPEND}")
		set(NX_INSTALL_PATHDEV_HEADERS "include/${NX_INSTALL_PATHDEV_SPECIFIC}")
		set(NX_INSTALL_PATHDEV_SOURCE "src/${NX_INSTALL_PATHDEV_SPECIFIC}")
		set(NX_INSTALL_PATHDEV_SOURCE_BASE "src")
	endif()

	if(NOT DEFINED NX_INSTALL_PATH_LOCAL)
		set(NX_INSTALL_PATH_LOCAL "${NX_INSTALL_PATH_ROOT}")
	endif()

	if(NOT DEFINED NX_INSTALL_PATH_APPS)
		set(NX_INSTALL_PATH_APPS "${NX_INSTALL_PATH_BINARIES}")
	endif()
	if(NOT DEFINED NX_INSTALL_PATH_LIBRARIES)
		set(NX_INSTALL_PATH_LIBRARIES "${NX_INSTALL_PATH_BINARIES}")
	endif()
	if(NOT DEFINED NX_INSTALL_PATH_LICENSES)
		set(NX_INSTALL_PATH_LICENSES "${NX_INSTALL_PATH_DOCUMENTATION}")
	endif()
	if(NOT DEFINED NX_INSTALL_PATH_SERVERS)
		set(NX_INSTALL_PATH_SERVERS "${NX_INSTALL_PATH_BINARIES}")
	endif()
	if(NOT DEFINED NX_INSTALL_PATHDEV_DOCUMENTATION)
		set(NX_INSTALL_PATHDEV_DOCUMENTATION "${NX_INSTALL_PATH_DOCUMENTATION}")
	endif()
	if(NOT DEFINED NX_INSTALL_PATHDEV_LIBRARIES)
		set(NX_INSTALL_PATHDEV_LIBRARIES "${NX_INSTALL_PATH_LIBRARIES}")
	endif()

	set(NX_INSTALL_PATH_APPS_DEBUG "${NX_INSTALL_PATH_APPS}")
	set(NX_INSTALL_PATH_BINARIES_DEBUG "${NX_INSTALL_PATH_BINARIES}")
	set(NX_INSTALL_PATH_LIBRARIES_DEBUG "${NX_INSTALL_PATH_LIBRARIES}")
	set(NX_INSTALL_PATH_SERVERS_DEBUG "${NX_INSTALL_PATH_SERVERS}")

	if(DEFINED CMAKE_OBJCOPY AND EXISTS "${CMAKE_OBJCOPY}")
		set(NX_INSTALL_PATH_APPS_DEBUG "${NX_INSTALL_PATH_APPS_DEBUG}/.debug")
		set(NX_INSTALL_PATH_BINARIES_DEBUG "${NX_INSTALL_PATH_BINARIES_DEBUG}/.debug")
		set(NX_INSTALL_PATH_LIBRARIES_DEBUG "${NX_INSTALL_PATH_LIBRARIES_DEBUG}/.debug")
		set(NX_INSTALL_PATH_SERVERS_DEBUG "${NX_INSTALL_PATH_SERVERS_DEBUG}/.debug")
	endif()

	file(RELATIVE_PATH NX_INSTALL_PATH_APPS_RPATH "/${NX_INSTALL_PATH_APPS}" "/${NX_INSTALL_PATH_LIBRARIES}")
	file(RELATIVE_PATH NX_INSTALL_PATH_BINARIES_RPATH "/${NX_INSTALL_PATH_BINARIES}" "/${NX_INSTALL_PATH_LIBRARIES}")
	file(RELATIVE_PATH NX_INSTALL_PATH_SERVERS_RPATH "/${NX_INSTALL_PATH_SERVERS}" "/${NX_INSTALL_PATH_LIBRARIES}")

	nx_install_pathext("")

	foreach(
		sPathType
		"APPS"
		"APPS_DEBUG"
		"APPS_RPATH"
		"BINARIES"
		"BINARIES_DEBUG"
		"BINARIES_RPATH"
		"DATA"
		"DOCUMENTATION"
		"LIBRARIES"
		"LIBRARIES_DEBUG"
		"LICENSES"
		"LOCAL"
		"ROOT"
		"SERVERS"
		"SERVERS_DEBUG"
		"SERVERS_RPATH"
		"SETTINGS")
		nx_set(NX_INSTALL_PATH_${sPathType} "${NX_INSTALL_PATH_${sPathType}}")
		nx_set(${NX_PROJECT_NAME}_PATH_${sPathType} "${NX_INSTALL_PATH_${sPathType}}")
	endforeach()
	foreach(sPathType "DOCUMENTATION" "EXPORT" "HEADERS" "LIBRARIES" "SOURCE" "SOURCE_BASE")
		nx_set(NX_INSTALL_PATHDEV_${sPathType} "${NX_INSTALL_PATHDEV_${sPathType}}")
		nx_set(${NX_PROJECT_NAME}_PATHDEV_${sPathType} "${NX_INSTALL_PATHDEV_${sPathType}}")
	endforeach()
	foreach(sPathType "LIBRARY_APPEND" "LIBRARY_SUFFIX" "PROJECT_PARENT")
		nx_set(NX_INSTALL_${sPathType} "${NX_INSTALL_${sPathType}}")
		nx_set(${NX_PROJECT_NAME}_${sPathType} "${NX_INSTALL_${sPathType}}")
	endforeach()

	nx_function_end()
endfunction()

function(nx_install_prefixes)
	nx_function_begin()

	if(NOT DEFINED NX_INITIALIZED_INSTALL)
		nx_set_global(NX_INITIALIZED_INSTALL OFF)
	endif()
	if(NOT DEFINED NX_INITIALIZED_PACKAGE)
		nx_set_global(NX_INITIALIZED_PACKAGE OFF)
	endif()
	if(NOT DEFINED NX_INITIALIZED_STAGING)
		nx_set_global(NX_INITIALIZED_STAGING OFF)
	endif()

	if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NX_INITIALIZED_INSTALL)
		set(NX_INITIALIZED_INSTALL ON)
		nx_set_global(CMAKE_INSTALL_PREFIX "${NX_INSTALL_PATH_DRIVE}${NX_INSTALL_PATH_LOCAL}")

		if(NOT DEFINED CPACK_INSTALL_PREFIX OR NX_INITIALIZED_PACKAGE)
			set(NX_INITIALIZED_PACKAGE ON)
			nx_set_global(CPACK_INSTALL_PREFIX "${NX_PACKAGE_PATH_DRIVE}${NX_INSTALL_PATH_ROOT}")
		endif()
	elseif(NOT DEFINED CPACK_INSTALL_PREFIX OR NX_INITIALIZED_PACKAGE)
		set(NX_INITIALIZED_PACKAGE ON)
		nx_set_global(CPACK_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
	endif()

	if(NOT DEFINED CMAKE_STAGING_PREFIX OR NX_INITIALIZED_STAGING)
		if(DEFINED CMAKE_SYSROOT)
			set(NX_INITIALIZED_STAGING ON)
			nx_set_global(CMAKE_STAGING_PREFIX "${CMAKE_SYSROOT}${NX_INSTALL_PATH_BASE}")
		elseif(DEFINED CMAKE_OSX_SYSROOT)
			set(NX_INITIALIZED_STAGING ON)
			nx_set_global(CMAKE_STAGING_PREFIX "${CMAKE_OSX_SYSROOT}${NX_INSTALL_PATH_BASE}")
		elseif(NOT NX_TARGET_PLATFORM_NATIVE OR NOT NX_TARGET_ARCHITECTURE_NATIVE)
			set(NX_CMAKE_SYSROOT_PATH "sysroots/${NX_TARGET_PLATFORM_STRING}-${NX_TARGET_ARCHITECTURE_STRING}")
			if(NX_HOST_PLATFORM_HAIKU)
				string(TOLOWER "${NX_CMAKE_SYSROOT_PATH}" NX_CMAKE_SYSROOT_PATH)
				if(NX_TARGET_PLATFORM_NATIVE
					AND NOT "x$ENV{HOME}" STREQUAL "x"
					AND NX_HOST_PLATFORM_HAIKU)
					set(NX_STAGING_PATH_ROOT "$ENV{HOME}/config/third-party/${NX_CMAKE_SYSROOT_PATH}")
				else()
					set(NX_STAGING_PATH_ROOT "/boot/home/config/third-party/${NX_CMAKE_SYSROOT_PATH}")
				endif()
			elseif(NX_HOST_PLATFORM_WINDOWS)
				if(NOT "x$ENV{SystemDrive}" STREQUAL "x")
					set(NX_STAGING_PATH_DRIVE "$ENV{SystemDrive}")
				else()
					set(NX_STAGING_PATH_DRIVE "C:")
				endif()
				set(NX_STAGING_PATH_ROOT "/${NX_CMAKE_SYSROOT_PATH}")
			else()
				string(TOLOWER "${NX_CMAKE_SYSROOT_PATH}" NX_CMAKE_SYSROOT_PATH)
				set(NX_STAGING_PATH_ROOT "/usr/opt/${NX_CMAKE_SYSROOT_PATH}")
			endif()
			set(NX_INITIALIZED_STAGING ON)
			nx_set_global(CMAKE_STAGING_PREFIX "${NX_STAGING_PATH_DRIVE}${NX_STAGING_PATH_ROOT}")
		endif()
	endif()

	nx_function_begin()
endfunction()

nx_install_initialize()
nx_install_prefixes()

# ===================================================================

function(nx_install_custom)
	nx_function_begin()

	set(lsParseModes "FILES" "DIRECTORIES" "CONTENTS" "DESTINATION" "COMPONENT")
	set(sParseMode "FILES")

	unset(NX_IC_FILES)
	unset(NX_IC_DIRECTORIES)
	unset(NX_IC_CONTENTS)

	set(NX_IC_COMPONENT "DAT")
	set(NX_IC_DESTINATION "${NX_INSTALL_PATH_DATA}")

	foreach(sArgument ${ARGN})
		if("${sArgument}" IN_LIST lsParseModes)
			set(sParseMode "${sArgument}")
		elseif(sParseMode STREQUAL "DESTINATION" OR sParseMode STREQUAL "COMPONENT")
			set(NX_IC_${sParseMode} "${sArgument}")
		else()
			get_filename_component(sArgument "${sArgument}" ABSOLUTE)
			list(APPEND NX_IC_${sParseMode} "${sArgument}")
		endif()
	endforeach()

	if(INSTALL_TARGETS${NX_PROJECT_NAME})
		if(DEFINED NX_IC_FILES AND NX_IC_FILES)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_${NX_IC_COMPONENT} ON)
			install(
				FILES ${NX_IC_FILES}
				COMPONENT ${NX_PROJECT_NAME}_${NX_IC_COMPONENT}
				DESTINATION "${NX_IC_DESTINATION}")
			foreach(sFileName ${NX_IC_FILES})
				get_filename_component(sFileName "${sFileName}" NAME)
				nx_append_global(NX_CLEANUP_DELETE "${NX_IC_DESTINATION}/${sFileName}")
			endforeach()
			nx_append_global(NX_CLEANUP_RMDIR "${NX_IC_DESTINATION}")
		endif()
		foreach(sDirectory ${NX_IC_CONTENTS})
			if(EXISTS "${sDirectory}" AND IS_DIRECTORY "${sDirectory}")
				nx_set(${NX_PROJECT_NAME}_COMPONENT_${NX_IC_COMPONENT} ON)
				install(
					DIRECTORY "${sDirectory}/"
					COMPONENT ${NX_PROJECT_NAME}_${NX_IC_COMPONENT}
					DESTINATION "${NX_IC_DESTINATION}")
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_IC_DESTINATION}")
			endif()
		endforeach()
		foreach(sDirectory ${NX_IC_DIRECTORIES})
			if(EXISTS "${sDirectory}" AND IS_DIRECTORY "${sDirectory}")
				nx_set(${NX_PROJECT_NAME}_COMPONENT_${NX_IC_COMPONENT} ON)
				install(
					DIRECTORY "${sDirectory}"
					COMPONENT ${NX_PROJECT_NAME}_${NX_IC_COMPONENT}
					DESTINATION "${NX_IC_DESTINATION}")
				get_filename_component(sDirectory "${sDirectory}" NAME)
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_IC_DESTINATION}/${sDirectory}")
			endif()
		endforeach()
	endif()

	nx_function_end()
endfunction()

# ===================================================================

function(nx_install_docs)
	nx_guard_function(nx_install_docs)
	nx_function_begin()

	set(lsParseModes "LICENSE" "README" "DEVEL" "FILES" "DIRECTORIES" "CONTENTS")
	set(sParseMode "FILES")

	unset(NX_ID_LICENSE)
	unset(NX_ID_README)
	unset(NX_ID_DEVEL)
	unset(NX_ID_FILES)
	unset(NX_ID_DIRECTORIES)
	unset(NX_ID_CONTENTS)

	foreach(sArgument ${ARGN})
		if("${sArgument}" IN_LIST lsParseModes)
			set(sParseMode "${sArgument}")
		else()
			get_filename_component(sArgument "${sArgument}" ABSOLUTE)
			list(APPEND NX_ID_${sParseMode} "${sArgument}")
		endif()
	endforeach()

	if(NOT DEFINED NX_ID_LICENSE)
		file(
			GLOB NX_ID_LICENSE
			LIST_DIRECTORIES false
			"COPYING" "COPYING.*" "LICENSE.*" "LICENSE-*" "docs/LICENSE.*" "docs/LICENSE-*")
	endif()
	if(NOT DEFINED NX_ID_README)
		file(
			GLOB NX_ID_README
			LIST_DIRECTORIES false
			"README"
			"README.*"
			"README-*"
			"ReadMe"
			"ReadMe.*"
			"ReadMe-*"
			"docs/README.*"
			"docs/README-*"
			"docs/ReadMe.*"
			"docs/ReadMe-*")
	endif()

	if(DEFINED NX_ID_LICENSE AND NX_ID_LICENSE)
		list(GET NX_ID_LICENSE 0 ${NX_PROJECT_NAME}_FILE_LICENSE)
		nx_set(${NX_PROJECT_NAME}_FILE_LICENSE "${${NX_PROJECT_NAME}_FILE_LICENSE}")
	endif()
	if(DEFINED NX_ID_README AND NX_ID_README)
		list(GET NX_ID_README 0 ${NX_PROJECT_NAME}_FILE_README)
		nx_set(${NX_PROJECT_NAME}_FILE_README "${${NX_PROJECT_NAME}_FILE_README}")
	endif()

	if(INSTALL_TARGETS${NX_PROJECT_NAME})
		if(NOT DEFINED NX_ID_DEVEL)
			file(
				GLOB NX_ID_DEVEL
				LIST_DIRECTORIES false
				"BUILDING.*" "README.dev" "README-dev" "docs/BUILDING.*")
		endif()
		if(NOT DEFINED NX_ID_DIRECTORIES)
			file(
				GLOB NX_ID_DIRECTORIES
				LIST_DIRECTORIES true
				"docs/*")
		endif()
		if(NOT DEFINED NX_ID_FILES)
			file(
				GLOB NX_ID_FILES
				LIST_DIRECTORIES false
				"AUTHORS"
				"BUGS"
				"CHANGELOG"
				"ChangeLog"
				"INSTALL"
				"NEWS"
				"PATCHES"
				"THANKS"
				"TODO"
				"VERSION"
				"*.md"
				"*.txt"
				"docs/*")
		endif()

		foreach(sLicense ${NX_ID_LICENSE})
			if("${sLicense}" IN_LIST NX_ID_FILES)
				list(REMOVE_ITEM NX_ID_FILES "${sLicense}")
			endif()
		endforeach()
		foreach(sDevReadme ${NX_ID_DEVEL})
			if("${sDevReadme}" IN_LIST NX_ID_FILES)
				list(REMOVE_ITEM NX_ID_FILES "${sDevReadme}")
			endif()
		endforeach()
		foreach(sReadme ${NX_ID_README})
			if("${sReadme}" IN_LIST NX_ID_FILES)
				list(REMOVE_ITEM NX_ID_FILES "${sReadme}")
			endif()
		endforeach()
		if("${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt" IN_LIST NX_ID_FILES)
			list(REMOVE_ITEM NX_ID_FILES "${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt")
		endif()

		if(DEFINED NX_ID_DEVEL AND NX_ID_DEVEL)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_DEV ON)
			install(
				FILES ${NX_ID_DEVEL}
				COMPONENT ${NX_PROJECT_NAME}_DEV
				DESTINATION "${NX_INSTALL_PATHDEV_DOCUMENTATION}")
			foreach(sFileName ${NX_ID_DEVEL})
				get_filename_component(sFileName "${sFileName}" NAME)
				nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATHDEV_DOCUMENTATION}/${sFileName}")
			endforeach()
			nx_append_global(NX_CLEANUP_RMDIR "${NX_INSTALL_PATHDEV_DOCUMENTATION}")
		endif()
		if(DEFINED NX_ID_LICENSE AND NX_ID_LICENSE)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_DOC ON)
			install(
				FILES ${NX_ID_LICENSE}
				COMPONENT ${NX_PROJECT_NAME}_DOC
				DESTINATION "${NX_INSTALL_PATH_LICENSES}")
			foreach(sFileName ${NX_ID_LICENSE})
				get_filename_component(sFileName "${sFileName}" NAME)
				nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATH_LICENSES}/${sFileName}")
			endforeach()
			nx_append_global(NX_CLEANUP_RMDIR "${NX_INSTALL_PATH_LICENSES}")
		endif()
		if(DEFINED NX_ID_README AND NX_ID_README)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_DOC ON)
			install(
				FILES ${NX_ID_README}
				COMPONENT ${NX_PROJECT_NAME}_DOC
				DESTINATION "${NX_INSTALL_PATH_DOCUMENTATION}")
			foreach(sFileName ${NX_ID_README})
				get_filename_component(sFileName "${sFileName}" NAME)
				nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATH_DOCUMENTATION}/${sFileName}")
			endforeach()
			nx_append_global(NX_CLEANUP_RMDIR "${NX_INSTALL_PATH_DOCUMENTATION}")
		endif()
		if(DEFINED NX_ID_FILES AND NX_ID_FILES)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_DOC ON)
			install(
				FILES ${NX_ID_FILES}
				COMPONENT ${NX_PROJECT_NAME}_DOC
				DESTINATION "${NX_INSTALL_PATH_DOCUMENTATION}")
			foreach(sFileName ${NX_ID_FILES})
				get_filename_component(sFileName "${sFileName}" NAME)
				nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATH_DOCUMENTATION}/${sFileName}")
			endforeach()
			nx_append_global(NX_CLEANUP_RMDIR "${NX_INSTALL_PATH_DOCUMENTATION}")
		endif()
		foreach(sDirectory ${NX_ID_CONTENTS})
			if(EXISTS "${sDirectory}" AND IS_DIRECTORY "${sDirectory}")
				nx_set(${NX_PROJECT_NAME}_COMPONENT_DOC ON)
				install(
					DIRECTORY "${sDirectory}/"
					COMPONENT ${NX_PROJECT_NAME}_DOC
					DESTINATION "${NX_INSTALL_PATH_DOCUMENTATION}")
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_INSTALL_PATH_DOCUMENTATION}")
			endif()
		endforeach()
		foreach(sDirectory ${NX_ID_DIRECTORIES})
			if(EXISTS "${sDirectory}" AND IS_DIRECTORY "${sDirectory}")
				nx_set(${NX_PROJECT_NAME}_COMPONENT_DOC ON)
				install(
					DIRECTORY ${sDirectory}
					COMPONENT ${NX_PROJECT_NAME}_DOC
					DESTINATION "${NX_INSTALL_PATH_DOCUMENTATION}")
				get_filename_component(sDirectory "${sDirectory}" NAME)
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_INSTALL_PATH_DOCUMENTATION}/${sDirectory}")
			endif()
		endforeach()
	endif()

	nx_function_end()
endfunction()

# ===================================================================

function(nx_install_source)
	nx_guard_function(nx_install_source)
	nx_function_begin()

	set(lsParseModes "FILES" "DIRECTORIES" "INCLUDES")
	set(sParseMode "FILES")

	unset(NX_IS_FILES)
	unset(NX_IS_DIRECTORIES)
	unset(NX_IS_INCLUDES)

	foreach(sArgument ${ARGN})
		if("${sArgument}" IN_LIST lsParseModes)
			set(sParseMode "${sArgument}")
		else()
			get_filename_component(sArgument "${sArgument}" ABSOLUTE)
			list(APPEND NX_IS_${sParseMode} "${sArgument}")
		endif()
	endforeach()

	if(INSTALL_TARGETS${NX_PROJECT_NAME})
		foreach(sInclude ${${NX_PROJECT_NAME}_DIRS_INCLUDE} ${NX_IS_INCLUDES})
			if(EXISTS "${sInclude}")
				nx_set(${NX_PROJECT_NAME}_COMPONENT_DEV ON)
				install(
					DIRECTORY "${sInclude}/"
					DESTINATION "${NX_INSTALL_PATHDEV_HEADERS}"
					COMPONENT ${NX_PROJECT_NAME}_DEV
					PATTERN "*.dox" EXCLUDE)
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_INSTALL_PATHDEV_HEADERS}")
			endif()
		endforeach()

		foreach(sSourcePair ${${NX_PROJECT_NAME}_FILES_INTERFACE})
			string(REPLACE "::" ";" sSourcePair "${sSourcePair}")
			list(GET sSourcePair 1 sRelSource)
			list(GET sSourcePair 0 sFile)
			get_filename_component(sDestination "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}" DIRECTORY)
			nx_set(${NX_PROJECT_NAME}_COMPONENT_DEV ON)
			install(
				FILES "${sFile}"
				DESTINATION "${sDestination}"
				COMPONENT ${NX_PROJECT_NAME}_DEV)
			nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}")
			nx_append_global(NX_CLEANUP_RMDIR "${sDestination}")
		endforeach()

		foreach(sCandidateFile ${NX_IS_FILES})
			unset(sRelSource)
			foreach(sCandidatePath "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}"
									${${NX_PROJECT_NAME}_DIRS_SOURCE})
				file(RELATIVE_PATH sTestPath "${sCandidatePath}" "${sCandidateFile}")
				string(SUBSTRING "${sTestPath}" 0 2 sTest)
				if(NOT sTest STREQUAL ".." AND NOT sTest MATCHES ":$")
					set(sRelSource "${sTestPath}")
				endif()
			endforeach()

			if(DEFINED sRelSource)
				get_filename_component(sDestination "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}" DIRECTORY)
				nx_set(${NX_PROJECT_NAME}_COMPONENT_DEV ON)
				install(
					FILES "${sCandidateFile}"
					DESTINATION "${sDestination}"
					COMPONENT ${NX_PROJECT_NAME}_DEV)
				nx_append_global(NX_CLEANUP_DELETE "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}")
				nx_append_global(NX_CLEANUP_RMDIR "${sDestination}")
			endif()
		endforeach()

		foreach(sCandidateFile ${NX_IS_DIRECTORIES})
			unset(sRelSource)
			foreach(sCandidatePath "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}"
									${${NX_PROJECT_NAME}_DIRS_SOURCE})
				file(RELATIVE_PATH sTestPath "${sCandidatePath}" "${sCandidateFile}")
				string(SUBSTRING "${sTestPath}" 0 2 sTest)
				if(NOT sTest STREQUAL ".." AND NOT sTest MATCHES ":$")
					set(sRelSource "${sTestPath}")
				endif()
			endforeach()

			if(DEFINED sRelSource)
				get_filename_component(sDestination "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}" DIRECTORY)
				nx_set(${NX_PROJECT_NAME}_COMPONENT_DEV ON)
				install(
					DIRECTORY "${sCandidateFile}"
					DESTINATION "${sDestination}"
					COMPONENT ${NX_PROJECT_NAME}_DEV)
				nx_append_global(NX_CLEANUP_RMDIR_F "${NX_INSTALL_PATHDEV_SOURCE}/${sRelSource}")
			endif()
		endforeach()
	endif()

	nx_function_end()
endfunction()

# ===================================================================

function(nx_install_runtime_dependencies)
	nx_guard_function(nx_install_runtime_dependencies)
	nx_function_begin()

	set(bCanDepend OFF)
	if(DEFINED ${NX_PROJECT_NAME}_TARGETS_EXECUTABLE
		OR DEFINED ${NX_PROJECT_NAME}_TARGETS_SHARED
		OR DEFINED ${NX_PROJECT_NAME}_TARGETS_MODULE)
		set(bCanDepend ON)
	endif()

	nx_dependent_option(INSTALL_DEPENDENCIES_ALL "Install Runtime Dependencies" ON
						"INSTALL_TARGETS_ALL; NX_TARGET_PLATFORM_WINDOWS; CMAKE_VERSION VERSION_GREATER_EQUAL 3.16" OFF)
	nx_dependent_option(INSTALL_DEPENDENCIES${NX_PROJECT_NAME} "Install Runtime Dependencies - ${PROJECT_NAME}" ON
						"INSTALL_DEPENDENCIES_ALL; INSTALL_TARGETS${NX_PROJECT_NAME}; bCanDepend" OFF)

	if(INSTALL_DEPENDENCIES${NX_PROJECT_NAME})
		unset(NX_GRD_TARGET_LIST)
		unset(NX_GRD_SYSTEM_LIST)

		if(DEFINED ${NX_PROJECT_NAME}_TARGETS_EXECUTABLE)
			set(NX_GRD_TARGET_LIST "${NX_GRD_TARGET_LIST}EXECUTABLES ")
			foreach(sTargetName ${${NX_PROJECT_NAME}_TARGETS_EXECUTABLE})
				set(NX_GRD_TARGET_LIST "${NX_GRD_TARGET_LIST}$<TARGET_FILE:${sTargetName}> ")
			endforeach()
		endif()
		if(DEFINED ${NX_PROJECT_NAME}_TARGETS_SHARED OR DEFINED ${NX_PROJECT_NAME}_TARGETS_MODULE)
			set(NX_GRD_TARGET_LIST "${NX_GRD_TARGET_LIST}LIBRARIES ")
			foreach(sTargetName ${${NX_PROJECT_NAME}_TARGETS_SHARED} ${${NX_PROJECT_NAME}_TARGETS_MODULE})
				set(NX_GRD_TARGET_LIST "${NX_GRD_TARGET_LIST}$<TARGET_FILE:${sTargetName}> ")
			endforeach()
		endif()

		foreach(sPathName ${CMAKE_SYSTEM_LIBRARY_PATH} ${CMAKE_MINGW_SYSTEM_LIBRARY_PATH})
			set(NX_GRD_SYSTEM_LIST "${NX_GRD_SYSTEM_LIST}\"${sPathName}\" ")
		endforeach()

		if(NOT DEFINED _CURRENT_YEAR)
			string(TIMESTAMP _CURRENT_YEAR "%Y")
		endif()
		if(NOT DEFINED _CURRENT_DATE)
			string(TIMESTAMP _CURRENT_DATE "%Y%m%d")
		endif()

		configure_file("${NXINSTALL_DIRECTORY}/NXInstallRuntimeDependencies.cmake.in"
						"${CMAKE_CURRENT_BINARY_DIR}/NXInstall${PROJECT_NAME}Dependencies.cmake" @ONLY)
		list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_BINARY_DIR}")
		include(NXInstall${PROJECT_NAME}Dependencies)
	endif()

	nx_function_end()
endfunction()
